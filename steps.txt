1.Завели страницу для главной front-page.php
  Вставили в него верстку из макета
  
2.Завели в корне темы папку assets.И скопировали туда папки css,img,js,lib из шаблона
  
3. В functions.php объявляем функцию, которая будет подключать стили и скрипты
  Подключаем шрифт roboto c google-fonts
  Подключаем Font Awesome
  Подключаем библиотеку animate(уже локально)
  Подключаем owlcarousel
  Подключаем файл стилей style.css
  
  В woocommerce-hooks.php отключили стили woocommerce
  
4. Т.к. мы планируем писать и свои стили, то в папке css создаем файл стилей для себя custom.css
   и подключим его
   
5. С front-page.php вырезаем часть, которая должна попадать в header и вставляем в header.php
  а на страницу подключаем header front-page.php стр 1
  и по аналогии - footer
  
6. Теперь из футера забираем скрипты, чтобы подключить в functions.php
  Т.к. jquery уже есть в wp нам остается при подключении указать ее имя
  первая false - это версия
  последнее true означает, что скрипт нужно подключать в футере.
  Также подключаем локальные библиотеки.
  
7. Подключим картинки, чтобы в консоли не вылазили ошибки с помощью echo get_template_directory_uri().'/assets/...'

8. Для того, чтобы гугл-шрифты были загружены заранее, используем link rel="preconnect" И подключаем его через хук wp_head
стр 12 functions.php с приоритетом 5, чтобы был выше, чем подключение шрифтов

9.Включаем в возможность поддержки темы title
10. Включаем поддержку миниатюр

11.Создадим в корне папку languages, в ней будут хранится переводы. И используя функцию load_theme_textdomain()
 укажем, где они хранятся
 
12. Подключаем меню. Подключается ч/3 функцию register_nav_menus();
Создаем меню в админке. И выводим его в шапке header.php стр 17

13.делаем чтобы лого выводил на главную <?php echo home_url('/') ?>

14.Регистрируем меню для категорий. В админке его создаем.Но добавить категории woo по умолчанию wp не дает. Чтобы их добавить в меню
переходим в настройки экрана(верхняя панель) и ставим галочку категории товаров. теперь категории можно добавлять в меню.
Выводим его в header. Далее пытаемся убрать все ненужное из него.
 И с помощью метода walker будем переопределять класс,который формирует меню. после => мы должны указать экземпляр класса, но сначало его создадим
 в папке inc создаем файл class-woostudy-menu-categories.php
 В нем заводим наш класс и этот файл подключаем в functions.php
 и вызываем новый экземпляр класса 'walker' => new Woostudy_Menu_Categories(),
 Класс Walker_Nav_Menu описан в файле woocommerce/wp-includes/class-walker-nav-menu.php
 Родительский класс Walker_Nav_Menu от которого мы наследуемся имеет 4 метода:
 1)start_lvl- методы, которые формируют вложенности
 2)end_lvl
 3)start_el - методы, которые формируют отдельные элементы(пункты меню)
 4)end_el
 Поэтому нам надо переделать стандартное меню, используя эти 4 метода
 
15. Регистрируем, создаем навбар меню, выводим в header. Для этого меню также создадим отдельный класс, т.к. верстка специфическая.
Здесь придется сделать подстветку активного пункта меню.Это будет в методе start_el.
Также в function.php написали функцию, чтобы красиво распечатывать объекты для работы.
 У нас есть объект $menu_item, если его распечатать, то мы увидим, что у него есть свойство current. У активной страницы [current] => 1, 
 у прочих - пустота. Поэтому проверяем на активность и навешиваем класс.
 Также подсветим родителя, если активна подменюшка.
 Если активна ссылка-потомок в объекте $menu_item есть свойство [current_item_parent]=> 1, иначе пустой.
 
 16.выводим на главную блок с категориями.
 Получить категории мы можем:
  1)используя стандартную функцию wp  get_categories(args)
  2) используя шорткоды, которые предлагает woo
  ссылка https://woocommerce.com/document/woocommerce-shortcodes/#product-category
  например шорткод [product_categories] позволяет показать все категории продуктов
  чтобы его вывести у wp есть функция do_shortcode('[product_categories]') Выводит категории ul>li (картинка, заголовок, количество)
  Очевидно, что есть какой-то шаблон, который мы должны подправить под себя.
  plugins/woocommerce/templates/content-product-cat.php
  Копируем его и помещаем в папку с темой в woocommerce, а там соответственно дописываем классы и меняем теги
  Также нужно убрать обертку ul. Она описана в файле wp-content/plugins/woocommerce/includes/class-wc-shortcodes.php
  И обертка выводится из шаблона templates/loop/loop-start.php
  Скопируем loop-start и loop-end и поместим в одноименную папку в нашу тему в woocommerce(создадим папку loop)
  
  По умолчанию выводится h2, нам же неужно по другому. Поэтому мы от хука woocommerce_shop_loop_subcategory_title
  открепим функцию woocommerce_template_loop_category_title и прикрепим свою.
  
17. Завели главную страницу в админке. Перешли в админка/настройки/чтение/отображать статическую страницу и главная страница - указали home

18.За карточку продукта в woo отвечает отдельный шаблон, который используется в карточках на любых страницах.
  Для вывода товаров можно также использовать шорткоды (есть для всех товаров- [products], для избранных - [featured_products],
  для последних - [recent_products] и тп (https://woocommerce.com/document/woocommerce-shortcodes/#products))
  Избранные продукты назначаются в админке. У продуктов есть столбец 'звездочка'
  Шаблон карточки товара лежит в wp-content/plugins/woocommerce/templates/content-product.php
  В нашей верстке ссылка на товар только на названии, поэтому мы удалим открытие и закрытие ссылки woo.
  Рейтинг в карточке, если отключить стили woo выводится словами. Нам же нужно звездами. Звездночные шрифты лежат в папке 
  wp-content/plugins/woocommerce/assets/fonts/star.*
  В woo подключаются они в woocommerce.css
  Нужно скопировать подключение и перенести в нашу тему. Создали в assets папку fonts, куда скопировали шрифты.
  И в custom.css подключили их + доп стили
  
19.Для работы с кнопкой "в корзину" забрали из папки wp-content/plugins/woocommerce/templates/loop/add-to-cart.php и price.php
  Шаблоны отвечают за вывод цены и корзину.
  В add-to-cart добавили классы стк 27
  Для цены обернули span в див
  
20 Делаем слайдер с помощью кастомных типов записи. Для этого заводим файл cpt.php(custom post type) в папке inc. 
  Здесь будем регистрировать все кастомные посты. И подключим этот файл ч/з function.php
  Чтобы получить слайдер используем глобальный объект post front-page.php стр 7
  
21 Если зайти на страницу мой акаунт не под админом, будет ссылка на фход, но нет формы регистрации.
Чтобы она появилась - woocommerce/настройки/акаунты и приватность/галочка на "разрешить пользователям регистрироваться на стр-це
мой аккаунт

22 <?php woocommerce_mini_cart(); ?>  выводит содержимое мини-корзины. На данном этапе, если удалять товар из корзины,
не видно изменений пока не перезагрузишь страницу. Чтобы поправить этот момент - нужен шаблон. Его мы скопируем из папки шаблонов
woocommerce/cart/mini-cart.php Создаем в теме в woocommerce папку cart и копируем туда шаблон mini-cart
И уже этот шаблон правим, чтобы получить нужный нам вид попап окна например.
Чтобы корзина заработала динамически, нужно обернуть ее в див с определенным классом widget_shopping_cart_content
Создаем попап,при клике на кнопку отображаем его, вызываем в нем функцию <?php woocommerce_mini_cart(); ?>.

Получить ссылку на корзину - <?php echo wc_get_cart_url(); ?>

Чтобы вывести количество товаров в счетчик можно пойти 2мя путями:
1) вывести общее кол-во единиц товаров в корзине <?php echo WC()->cart->get_cart_contents_count(); ?>
2) вывести кол-во позиций(возвращает массив элементов в корзине) <?php echo count(WC()->cart->get_cart()); ?>
можно вывести сумму <?php echo WC()->cart->get_cart_total(); ?>
  Но после вывода перестанет выводить ajax, нужно пока перезагружать
  Как теперь сделать так, чтобы при добавлении обновлялось автоматом?
  https://woocommerce.com/document/show-cart-contents-total/?quid=1f5f4d6b6d68544d39e2d46e05b7e096
  Нужно использовать спец фильтр woocommerce_add_to_cart_fragments
  
23 Реализуем поиск. Т.к. это интернет магазин, то искать будем товары и => это не стандартный поиск wp.
  Мы будем использовать плагин Advanced Woo Search.
  В панели админа появляется вкладка Adv.Woo Search. Во вкладке основные написаны 4 способа подключения на страницу.
  Самый простой - 4  - добавить php код. Но сразу после вставки форма не появляется, плагин требует после установки реиндексации таблицы.
  Вкладка основные -> переиндексировать таблицу
  Теперь появится форма поиска. Во вкладке search form можно выбрать вариант поисковой формы

  
------------------- Страница магазина archive-product.php ---------------------------

1. В корень папки копируем шаблон archive-product.php из plugins/woocommerce/templates
   Шаблон перестраиваем под свою верску. Написали перед начальным шабдоном  return, чтобы ниже не выводилось ничего,
   а в веху будем копировать что нужно, чтобы не запутаться.
   
   ХЛЕБНЫЕ КРОШКИ - открепили от хука, вставили в шаблон свою верстку-обертку и внутри сами вызовем функцию, которую открепили
   Дорабатываем крошки как в примере в документации: цепляемся к фильтру woocommerce_breadcrumb_defaults, навешиваем свою функцию,
   внутрь ложим массив, который настроит хлебные крошки
   документация: https://woocommerce.com/document/customise-the-woocommerce-breadcrumb/