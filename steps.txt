1.Завели страницу для главной front-page.php
  Вставили в него верстку из макета
  
2.Завели в корне темы папку assets.И скопировали туда папки css,img,js,lib из шаблона
  
3. В functions.php объявляем функцию, которая будет подключать стили и скрипты
  Подключаем шрифт roboto c google-fonts
  Подключаем Font Awesome
  Подключаем библиотеку animate(уже локально)
  Подключаем owlcarousel
  Подключаем файл стилей style.css
  
  В woocommerce-hooks.php отключили стили woocommerce
  
4. Т.к. мы планируем писать и свои стили, то в папке css создаем файл стилей для себя custom.css
   и подключим его
   
5. С front-page.php вырезаем часть, которая должна попадать в header и вставляем в header.php
  а на страницу подключаем header front-page.php стр 1
  и по аналогии - footer
  
6. Теперь из футера забираем скрипты, чтобы подключить в functions.php
  Т.к. jquery уже есть в wp нам остается при подключении указать ее имя
  первая false - это версия
  последнее true означает, что скрипт нужно подключать в футере.
  Также подключаем локальные библиотеки.
  
7. Подключим картинки, чтобы в консоли не вылазили ошибки с помощью echo get_template_directory_uri().'/assets/...'

8. Для того, чтобы гугл-шрифты были загружены заранее, используем link rel="preconnect" И подключаем его через хук wp_head
стр 12 functions.php с приоритетом 5, чтобы был выше, чем подключение шрифтов

9.Включаем в возможность поддержки темы title
10. Включаем поддержку миниатюр

11.Создадим в корне папку languages, в ней будут хранится переводы. И используя функцию load_theme_textdomain()
 укажем, где они хранятся
 
12. Подключаем меню. Подключается ч/3 функцию register_nav_menus();
Создаем меню в админке. И выводим его в шапке header.php стр 17

13.делаем чтобы лого выводил на главную <?php echo home_url('/') ?>

14.Регистрируем меню для категорий. В админке его создаем.Но добавить категории woo по умолчанию wp не дает. Чтобы их добавить в меню
переходим в настройки экрана(верхняя панель) и ставим галочку категории товаров. теперь категории можно добавлять в меню.
Выводим его в header. Далее пытаемся убрать все ненужное из него.
 И с помощью метода walker будем переопределять класс,который формирует меню. после => мы должны указать экземпляр класса, но сначало его создадим
 в папке inc создаем файл class-woostudy-menu-categories.php
 В нем заводим наш класс и этот файл подключаем в functions.php
 и вызываем новый экземпляр класса 'walker' => new Woostudy_Menu_Categories(),
 Класс Walker_Nav_Menu описан в файле woocommerce/wp-includes/class-walker-nav-menu.php
 Родительский класс Walker_Nav_Menu от которого мы наследуемся имеет 4 метода:
 1)start_lvl- методы, которые формируют вложенности
 2)end_lvl
 3)start_el - методы, которые формируют отдельные элементы(пункты меню)
 4)end_el
 Поэтому нам надо переделать стандартное меню, используя эти 4 метода
 
15. Регистрируем, создаем навбар меню, выводим в header. Для этого меню также создадим отдельный класс, т.к. верстка специфическая.
Здесь придется сделать подстветку активного пункта меню.Это будет в методе start_el.
Также в function.php написали функцию, чтобы красиво распечатывать объекты для работы.
 У нас есть объект $menu_item, если его распечатать, то мы увидим, что у него есть свойство current. У активной страницы [current] => 1, 
 у прочих - пустота. Поэтому проверяем на активность и навешиваем класс.
 Также подсветим родителя, если активна подменюшка.
 Если активна ссылка-потомок в объекте $menu_item есть свойство [current_item_parent]=> 1, иначе пустой.
 
 16.выводим на главную блок с категориями.
 Получить категории мы можем:
  1)используя стандартную функцию wp  get_categories(args)
  2) используя шорткоды, которые предлагает woo
  ссылка https://woocommerce.com/document/woocommerce-shortcodes/#product-category
  например шорткод [product_categories] позволяет показать все категории продуктов
  чтобы его вывести у wp есть функция do_shortcode('[product_categories]') Выводит категории ul>li (картинка, заголовок, количество)
  Очевидно, что есть какой-то шаблон, который мы должны подправить под себя.
  plugins/woocommerce/templates/content-product-cat.php
  Копируем его и помещаем в папку с темой в woocommerce, а там соответственно дописываем классы и меняем теги
  Также нужно убрать обертку ul. Она описана в файле wp-content/plugins/woocommerce/includes/class-wc-shortcodes.php
  И обертка выводится из шаблона templates/loop/loop-start.php
  Скопируем loop-start и loop-end и поместим в одноименную папку в нашу тему в woocommerce(создадим папку loop)
  
  По умолчанию выводится h2, нам же неужно по другому. Поэтому мы от хука woocommerce_shop_loop_subcategory_title
  открепим функцию woocommerce_template_loop_category_title и прикрепим свою.
  
17. Завели главную страницу в админке. Перешли в админка/настройки/чтение/отображать статическую страницу и главная страница - указали home

18.За карточку продукта в woo отвечает отдельный шаблон, который используется в карточках на любых страницах.
  Для вывода товаров можно также использовать шорткоды (есть для всех товаров- [products], для избранных - [featured_products],
  для последних - [recent_products] и тп (https://woocommerce.com/document/woocommerce-shortcodes/#products))
  Избранные продукты назначаются в админке. У продуктов есть столбец 'звездочка'
  Шаблон карточки товара лежит в wp-content/plugins/woocommerce/templates/content-product.php
  В нашей верстке ссылка на товар только на названии, поэтому мы удалим открытие и закрытие ссылки woo.
  Рейтинг в карточке, если отключить стили woo выводится словами. Нам же нужно звездами. Звездночные шрифты лежат в папке 
  wp-content/plugins/woocommerce/assets/fonts/star.*
  В woo подключаются они в woocommerce.css
  Нужно скопировать подключение и перенести в нашу тему. Создали в assets папку fonts, куда скопировали шрифты.
  И в custom.css подключили их + доп стили
  
19.Для работы с кнопкой "в корзину" забрали из папки wp-content/plugins/woocommerce/templates/loop/add-to-cart.php и price.php
  Шаблоны отвечают за вывод цены и корзину.
  В add-to-cart добавили классы стк 27
  Для цены обернули span в див
  
20 Делаем слайдер с помощью кастомных типов записи. Для этого заводим файл cpt.php(custom post type) в папке inc. 
  Здесь будем регистрировать все кастомные посты. И подключим этот файл ч/з function.php
  Чтобы получить слайдер используем глобальный объект post front-page.php стр 7
  
21 Если зайти на страницу мой акаунт не под админом, будет ссылка на фход, но нет формы регистрации.
Чтобы она появилась - woocommerce/настройки/акаунты и приватность/галочка на "разрешить пользователям регистрироваться на стр-це
мой аккаунт

22 <?php woocommerce_mini_cart(); ?>  выводит содержимое мини-корзины. На данном этапе, если удалять товар из корзины,
не видно изменений пока не перезагрузишь страницу. Чтобы поправить этот момент - нужен шаблон. Его мы скопируем из папки шаблонов
woocommerce/cart/mini-cart.php Создаем в теме в woocommerce папку cart и копируем туда шаблон mini-cart
И уже этот шаблон правим, чтобы получить нужный нам вид попап окна например.
Чтобы корзина заработала динамически, нужно обернуть ее в див с определенным классом widget_shopping_cart_content
Создаем попап,при клике на кнопку отображаем его, вызываем в нем функцию <?php woocommerce_mini_cart(); ?>.

Получить ссылку на корзину - <?php echo wc_get_cart_url(); ?>

Чтобы вывести количество товаров в счетчик можно пойти 2мя путями:
1) вывести общее кол-во единиц товаров в корзине <?php echo WC()->cart->get_cart_contents_count(); ?>
2) вывести кол-во позиций(возвращает массив элементов в корзине) <?php echo count(WC()->cart->get_cart()); ?>
можно вывести сумму <?php echo WC()->cart->get_cart_total(); ?>
  Но после вывода перестанет выводить ajax, нужно пока перезагружать
  Как теперь сделать так, чтобы при добавлении обновлялось автоматом?
  https://woocommerce.com/document/show-cart-contents-total/?quid=1f5f4d6b6d68544d39e2d46e05b7e096
  Нужно использовать спец фильтр woocommerce_add_to_cart_fragments
  
23 Реализуем поиск. Т.к. это интернет магазин, то искать будем товары и => это не стандартный поиск wp.
  Мы будем использовать плагин Advanced Woo Search.
  В панели админа появляется вкладка Adv.Woo Search. Во вкладке основные написаны 4 способа подключения на страницу.
  Самый простой - 4  - добавить php код. Но сразу после вставки форма не появляется, плагин требует после установки реиндексации таблицы.
  Вкладка основные -> переиндексировать таблицу
  Теперь появится форма поиска. Во вкладке search form можно выбрать вариант поисковой формы

  
---------------------- Страница магазина archive-product.php --------------------------------------
эта страница является шаблоном для страницы магазин, категории, поиск


1. В корень папки копируем шаблон archive-product.php из plugins/woocommerce/templates
   Шаблон перестраиваем под свою верску. Написали перед начальным шабдоном  return, чтобы ниже не выводилось ничего,
   а в веху будем копировать что нужно, чтобы не запутаться.
   
   ХЛЕБНЫЕ КРОШКИ - открепили от хука, вставили в шаблон свою верстку-обертку и внутри сами вызовем функцию, которую открепили
   Дорабатываем крошки как в примере в документации: цепляемся к фильтру woocommerce_breadcrumb_defaults, навешиваем свою функцию,
   внутрь ложим массив, который настроит хлебные крошки
   документация: https://woocommerce.com/document/customise-the-woocommerce-breadcrumb/
   
   ЦЕНТР СТРАНИЦЫ САЙДБАР + МАГАЗИН
   В шаблон вставляем нашу оберку и внутрь помещаем хук, к которому привязан вызов сайдбара.
   Для сайдбара нам потребуется шаблон. В папке с темой создаем sidebar.php. Ложим туда пока нашу статику.
   Хук woocommerce_sidebar подключает сайдбар из папки с активной темой.
   
   Для контента есть 2 хука, 1 -открывает обертки, 2- закрывает.
   	<?php do_action( 'woocommerce_before_main_content' ); ?>
	  <?php do_action( 'woocommerce_after_main_content' ); ?>
    Но по нашей верстке нам придется переопределять эту обертку.
    Копируем из plugins/woocommerce/templates/global/wrapper-start.php и wrapper-end.php
    В этих файлах идет пироверка на темы, а у нас наша тема, поэтому мы удаляем из файлов все.
    И скопировать в start обертку из нашей верстки. в end закрытие обертки.
    
    На главной странице карточки товара выводятся по 4 в ряд. Здесь же есть сайдбар, и теперь нам нужно,
    чтобы карточки выводились по 3 в ряд. Поправить это можно с помощью условий.
    На этот случай в документации woo https://woocommerce.com/document/conditional-tags/
    есть функции, которые сделаны по аналогии с условными тегами(функциями) в самом wp.
    В wp есть условные функции, которые позволяют проверить например главная ли эта страница is_home() и тп.
    И в wc такие есть. Проверить страница эта магазина или нет - is_shop().
    И на странице продукта content-product.php там где задаем классы обертке проверяем просматривается ли главная страница
    is_front_page() и если да - ставим классы для 4 в ряд, иначе 3 в ряд.
    
    Ограничить вывод товара: сверху на странице админ панель -> настроить -> woocommerce -> каталог товаров ->Товаров в строке
    -> 3 -> Строк на странице -> в нашем случае ставим 2 -> опубликовать
    
    Подкорректировать вид сортировки товара: шаблон хранится woocommerce/templates/loop/orderby.php
    и там же шаблон пагинации pagination.php
    Копируем шаблоны в свою папку woocommerce/loop
    В шаблоне orderby добавим селекту бутстраповский класс custom-select
    
    В шаблоне пагинации обернем тег нам в col-12 и добавим своих стилей
    
    Добавляем на страницу сайдбар. Для этого в function.php регистрируем его-строка 21 function.php
    Функция вешается на хук widgets_init. register_sidebar - функция wp, можно посмотреть документацию
    Далее в файле sidebar.php делаем проверку на активный сайдбар.
    Затем в админке внешний вид->виджеты-> откроется пустой сайдбар, где пока нет ни одного виджета и их нужно добавить.
    WC поставляет виджета, можно забить в поиске фильтрация. Выбираем нужный фильтр.Исправляем название если надо.
    Также нам нужен фильтр по цвету и по размеру, поэтому добавим фильтр по атрибутам и там выбераем цвет.
    Выводи на странице sidebar.php c помощью функции wp: <?php dynamic_sidebar('sidebar-1'); ?>
    
    Если зайти на страницу категории, то мы увидим, что используется шаблон taxonomy-product-cat.php
    А если открыть этот шаблон, то увидим, что там всего одна строка с подключением шаблона archive-product.php
    Следовательно, если страница категории по дизайну должна отличаться от страницы магазина, то нужно скопировать к себе
    шаблон taxonomy-product-cat.php и вместо подключения archive-product.php можно описать свой контент.
    Аналогично с taxonomy-product-tag.php
    Аналогично со страницей поиска.
    
    Если товар в корзину добавляется без ajax - с перезагрузкой страницы(может тема не поддерживать и тп), то
    тогда должно выводится уведомление woocommerce_output_all_notices, вывод которого прикреплен к хуку woocommerce_before_shop_loop
    
    
    ---------------------- Страница отдельного товара --------------------------------------
    
    Шаблоны: wp-content/plugins/woocommerce/templates/single-product.php - общая структура
             wp-content/plugins/woocommerce/templates/content-single-product.php - вывод самой карточки
    
    
    Переделываем шаблон под свою верстку как archive-product.php
    
    В этом шаблоне есть хук woocommerce_sidebar, к которому подключается сайтбар. По нашему макету здесь сайтбар не нужен.
    Поэтому будем использовать условную функцию wc  is_product() -  просматриваем ли мы страницу продукта
    Но бывает, что условные функции не отрабатывают, тогда их нужно цеплять на глобальные хуки н/р template_redirect
    В файле woocommerce-hooks пишем проверку и удаляем сайтбар. строка 55
    
    НА СТРАНИЦЕ ПРОДУКТА ТОВАР ДОБАВЛЯЕТСЯ В КОРЗИНУ БЕЗ АЯКСА!
    Поэтому вывод сообщений(уведомлений) woocommerce_output_all_notices очень важен.
    
    Эта запись в карточке товара предназначина для зашифровки с паролем
    if ( post_password_required() ) {
      echo get_the_password_form(); // WPCS: XSS ok.
      return;
    }
    Если, нам по дизайну не нужно - удаляем.
    
    ------Slider--------
    Слайдер в карточке товара вешается на хук woocommerce_before_single_product_summary
    Шаблон, отвечающий за вывод основного изображения - wp-content/plugins/woocommerce/templates/single-product/product-image.php
    Шаблон, отвечающий за вывод доп изображений - wp-content/plugins/woocommerce/templates/single-product/product-thumbnails.php
    
    В нашем случае слайдер кардинально отличается и подправить шаблоны не получится.
    
    Нам пригодится метод у объекта $product $product->get_image_id() 
    Получает id основного изображения.
    А зная id, можем используя функции wp получить всю информацию об изображении, включая путь к нему.
    wp_get_attachment_image_url(id, 'full') получаем url картинки
    wc_placeholder_img_src('full') получить фото-заглушку wc
    
    $product->get_gallery_image_ids() возвращает массив id галереи товара
    <?php foreach($product_img_ids as $product_img_id): ?>
		<?php endforeach; ?>
    
    У wc в поддержке темы можно включить слайдер  https://woocommerce.com/document/woocommerce-theme-developer-handbook/
    add_theme_support( 'wc-product-gallery-zoom' );
    add_theme_support( 'wc-product-gallery-lightbox' );
    add_theme_support( 'wc-product-gallery-slider' );
    Их надо объявить в function.php
    И придется стилями красиво оформить.
    
    За количество товара отвечает свой шаблон:
    wp-content/plugins/woocommerce/templates/global/quantity-input.php
    
    За добавить в корзину шаблон:
    wp-content/plugins/woocommerce/templates/single-product/add-to-cart и для каждого типа товара свой файл
    Cоздаем в нашей папке woocommerce папку single-product и целиком копируем туда всю папку add-to-cart 
    
    В шаблон вокруг инпута добавляем кнопки +/- и в main.js немного поменяем функцию, добавив в нее отмену стандартного поведения кнопок
    функция Product Quantity 

+++++++++++++++++++++++++++++++++++++    
    шаблон "в корзину" партнерского товара - woocommerce/templates/single-product/add-to-cart/external.php
    правим кнопку, добавляем классы из верстки
    
    ф-ция wc_query_string_form_fields добавляет скрытые поля с get-параметрами. Можно передать параметры, чтобы партнер понял что пришло именно от нас

++++++++++++++++++++++++++++++++++++++    
    шаблон "в корзину" вариативного товара - variation-add-to-cart-button.php
    Мы в него, также как и в простой товар добавим перед woocommerce_quantity_input обертку
    
    <div class="d-flex align-items-center mb-4 pt-2">
			<div class="input-group quantity mr-3" style="width: 130px;">
				<div class="input-group-btn">
					<button class="btn btn-primary btn-minus">
						<i class="fa fa-minus"></i>
					</button>
				</div><!--./input-group-btn-->
        
        инпут в шаблоне
        
        <div class="input-group-btn">
					<button class="btn btn-primary btn-plus">
						<i class="fa fa-plus"></i>
					</button>
				</div><!--./input-group-btn-->
		  </div>
      
      и после кнопки закрывающий див
      А кнопке добавим классы из верстки
      
++++++++++++++++++++++++++++++++++      
      ДЛЯ ОФОРМЛЕНИЯ ВЫБОРА ОПЦИЙ у вариативного товара шаблон - variable.php
      Там есть 2 селекта и массивом добавляются опции, атрибуты. Мы можем предположить, что по аналогии можно передать и класс
      передаем класс 'class'   => 'custom-select' и у селекта становится нужный вид, остальное подправляем стилями
      
++++++++++++++++++++++++++++++++
если у нас другой слайдер и нужно поменять фото например, то это делается в variation.php
Это файл с шаблонизатором. Здесь в дивы выводятся шаблончики.

У нас есть некий объект data.variation 
у которого есть св-во variation_description - это описание(description) вариации
price_html - цена в карточке
availability_html - доступность какая-то

Таким образом мы тоже можем добавить атрибуты, что нам нужны.
ГДЕ ВЗЯТЬ ЭТИ АТРИБУТЫ и как добавить?
ссылка на статью https://usersinsights.com/woocommerce-get-product-variations-programmatically

	<div class="test">
		<?php
		global $product;
		woostudy_debug($product->get_available_variations());
		?>
	</div>
  Выведется в итоге как раз data.variation массив вариаций и  там можно найти свойства, перечисленные выше
  
  Там есть и изображение image, можно вывести <div class="test">{{{ data.variation.image.url }}}</div>
  И если нам нужно ч/з js брать эту картинку и менять ее в слайдере, то это можно сделать зацепившись за событые (в документации)

add_action( 'woocommerce_before_variations_form', 'ui_display_wc_variation' );
 
function ui_display_wc_variation() {    
   global $product;
  ?>
  <script>
  jQuery(document).ready(function() {
    jQuery( 'input.variation_id' ).change( function(){
      if( jQuery.trim( jQuery( 'input.variation_id' ).val() )!='' ) {
        var variation = jQuery( 'input.variation_id' ).val();
        console.log('Variation ' + variation );
        // your custom code goes here
      }
    });
  });
  </script>
  <?php
}

++++++++++++++++++
В сгруппированном товаре выводится табличка с инпутами чтобы вводить количество товара.
Шаблон карточки товара - grouped.php

++++++++++++++++++++++++++++++++++
В карточке товаров табы с характеристиками, отзывами
====================================================
шаблон карточки товара - content-single-product.php
Вкладки реализует хук 'woocommerce_after_single_product_summary'
На нее навешаны три функции:
1) woocommerce_output_product_data_tabs  - выводит табы
2) woocommerce_upsell_display - выводит апсел(сопутствующие товары)
3) woocommerce_output_related_products - выводит  связаные товары (связаные по меткам или категориям и тп)
related_products выводится в том случае, если нет апсейлов

Шаблон табов находится wp-content/plugins/woocommerce/templates/single-product/tabs/tabs.php
В нашей папке single-product создаем папку tabs И копируем туда tabs.php

За таб "Детали" отвечает шаблон single-product/product-attributes.php
Чтобы табличка была красиво оформлена достаточно добавить туда бутстраповские классы table table-bordered

Отзывы - это комментарии в wp, только они имеют другой тип review (как у постов и товаров).
Шаблон отзывов находится в woocommerce/templates/single-product-reviews.

Копируем файл в нашу папку woocommerce и меняем шаблон в соотвествии с нашей верской, добавляя нужные дивы с классами.
Для перевода шрифта с цифрами в звезды используется шрифт WooCommerce.woff, который копируется из 
woocommerce/assets/fonts к нам в шрифты и подключается

В карточке товара где звезды, после появления отзывов добавилась ссылка "(2 отзыва клиентов)". Чтобы ее убрать, 
копируем к себе woocommerce/templates/single-product/rating.php и там просто удалим ссылку.

++++++++++++++++++++++++++++++++++
В карточке товаров слайдер с сопутствующими товарами
====================================================
На данный момент у нас выводятся в карточку товара товары - Апсейл карточками.
related_products мы отключили (Кросселы)
В верстке это реализовано слайдером. Плюс они выводятся в блоке с табами. Поэтому нам их нужно от-туда отключитьи подключить ниже.

В content-single-product.php у нас описывается вся карточка. И там есть хук, отвечающий за вывод кросселов и апсейлов.
Смотрим правильность названий там и в файле woocommerce-hooks.php отключаем:
remove_action('woocommerce_after_single_product_summary', 'woocommerce_upsell_display', 15);

Теперь вызовем эту фун-ю в том месте где нам нужно.
В content-single-product.php  в нужном месте вызовем эту функцию <?php woocommerce_upsell_display() ?>

Товары выводятся с разметкой бутстрапа, а нам это не нужно.
Поэтому найдем шаблон, который отвечает за апсейлы: 
woocommerce/templates/single-product/up-sells.php
Копируем его и ложим в нашу папку single-productВ шаблоне в соответствии с версткой 
вставляем куда нужно нужные классы, убираем ненужные обертки и тп
А чтобы карточки выводились в слайдере как нам надо, но не ломать другие шаблоны, мы подключим
свой шаблон wc_get_template_part( 'content', 'product-upsells' ); и его нужно создать.
Мы копируем файл content-product.php и вставляем его в woocommerce, переименовывая в 
content-product-upsells.php
И в нем удаляем, все что нам не нужно в шаблоне.
