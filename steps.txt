1.Завели страницу для главной front-page.php
  Вставили в него верстку из макета
  
2.Завели в корне темы папку assets.И скопировали туда папки css,img,js,lib из шаблона
  
3. В functions.php объявляем функцию, которая будет подключать стили и скрипты
  Подключаем шрифт roboto c google-fonts
  Подключаем Font Awesome
  Подключаем библиотеку animate(уже локально)
  Подключаем owlcarousel
  Подключаем файл стилей style.css
  
  В woocommerce-hooks.php отключили стили woocommerce
  
4. Т.к. мы планируем писать и свои стили, то в папке css создаем файл стилей для себя custom.css
   и подключим его
   
5. С front-page.php вырезаем часть, которая должна попадать в header и вставляем в header.php
  а на страницу подключаем header front-page.php стр 1
  и по аналогии - footer
  
6. Теперь из футера забираем скрипты, чтобы подключить в functions.php
  Т.к. jquery уже есть в wp нам остается при подключении указать ее имя
  первая false - это версия
  последнее true означает, что скрипт нужно подключать в футере.
  Также подключаем локальные библиотеки.
  
7. Подключим картинки, чтобы в консоли не вылазили ошибки с помощью echo get_template_directory_uri().'/assets/...'

8. Для того, чтобы гугл-шрифты были загружены заранее, используем link rel="preconnect" И подключаем его через хук wp_head
стр 12 functions.php с приоритетом 5, чтобы был выше, чем подключение шрифтов

9.Включаем в возможность поддержки темы title
10. Включаем поддержку миниатюр

11.Создадим в корне папку languages, в ней будут хранится переводы. И используя функцию load_theme_textdomain()
 укажем, где они хранятся
 
12. Подключаем меню. Подключается ч/3 функцию register_nav_menus();
Создаем меню в админке. И выводим его в шапке header.php стр 17

13.делаем чтобы лого выводил на главную <?php echo home_url('/') ?>

14.Регистрируем меню для категорий. В админке его создаем.Но добавить категории woo по умолчанию wp не дает. Чтобы их добавить в меню
переходим в настройки экрана(верхняя панель) и ставим галочку категории товаров. теперь категории можно добавлять в меню.
Выводим его в header. Далее пытаемся убрать все ненужное из него.
 И с помощью метода walker будем переопределять класс,который формирует меню. после => мы должны указать экземпляр класса, но сначало его создадим
 в папке inc создаем файл class-woostudy-menu-categories.php
 В нем заводим наш класс и этот файл подключаем в functions.php
 и вызываем новый экземпляр класса 'walker' => new Woostudy_Menu_Categories(),
 Класс Walker_Nav_Menu описан в файле woocommerce/wp-includes/class-walker-nav-menu.php
 Родительский класс Walker_Nav_Menu от которого мы наследуемся имеет 4 метода:
 1)start_lvl- методы, которые формируют вложенности
 2)end_lvl
 3)start_el - методы, которые формируют отдельные элементы(пункты меню)
 4)end_el
 Поэтому нам надо переделать стандартное меню, используя эти 4 метода
 
15. Регистрируем, создаем навбар меню, выводим в header. Для этого меню также создадим отдельный класс, т.к. верстка специфическая.
Здесь придется сделать подстветку активного пункта меню.Это будет в методе start_el.
Также в function.php написали функцию, чтобы красиво распечатывать объекты для работы.
 У нас есть объект $menu_item, если его распечатать, то мы увидим, что у него есть свойство current. У активной страницы [current] => 1, 
 у прочих - пустота. Поэтому проверяем на активность и навешиваем класс.
 Также подсветим родителя, если активна подменюшка.
 Если активна ссылка-потомок в объекте $menu_item есть свойство [current_item_parent]=> 1, иначе пустой.